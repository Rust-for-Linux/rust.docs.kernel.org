(function() {var type_impls = {
"core":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#334-355\">source</a><a href=\"#impl-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedconstant.MIN\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const <a href=\"core/primitive.i32.html#associatedconstant.MIN\" class=\"constant\">MIN</a>: Self = -2_147_483_648i32</h4></section></summary><div class=\"docblock\"><p>The smallest value that can be represented by this integer type\n(−2<sup>31</sup>).</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MIN, -<span class=\"number\">2147483648</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::MIN,+-2147483648);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.MAX\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.43.0\">1.43.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const <a href=\"core/primitive.i32.html#associatedconstant.MAX\" class=\"constant\">MAX</a>: Self = 2_147_483_647i32</h4></section></summary><div class=\"docblock\"><p>The largest value that can be represented by this integer type\n(2<sup>31</sup> − 1).</p>\n<h5 id=\"examples-1\"><a href=\"#examples-1\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX, <span class=\"number\">2147483647</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::MAX,+2147483647);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedconstant.BITS\" class=\"associatedconstant\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.53.0\">1.53.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const <a href=\"core/primitive.i32.html#associatedconstant.BITS\" class=\"constant\">BITS</a>: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a> = 32u32</h4></section></summary><div class=\"docblock\"><p>The size of this integer type in bits.</p>\n<h5 id=\"examples-2\"><a href=\"#examples-2\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::BITS, <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::BITS,+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str_radix\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"core/primitive.i32.html#tymethod.from_str_radix\" class=\"fn\">from_str_radix</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>, radix: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Converts a string slice in a given base to an integer.</p>\n<p>The string is expected to be an optional <code>+</code> or <code>-</code> sign followed by digits.\nLeading and trailing whitespace represent an error. Digits are a subset of these characters,\ndepending on <code>radix</code>:</p>\n<ul>\n<li><code>0-9</code></li>\n<li><code>a-z</code></li>\n<li><code>A-Z</code></li>\n</ul>\n<h5 id=\"panics\"><a href=\"#panics\">Panics</a></h5>\n<p>This function panics if <code>radix</code> is not in the range from 2 to 36.</p>\n<h5 id=\"examples-3\"><a href=\"#examples-3\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::from_str_radix(<span class=\"string\">\"A\"</span>, <span class=\"number\">16</span>), <span class=\"prelude-val\">Ok</span>(<span class=\"number\">10</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::from_str_radix(%22A%22,+16),+Ok(10));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.count_ones\" class=\"fn\">count_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-4\"><a href=\"#examples-4\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0b100_0000i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.count_ones(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0b100_0000i32;%0A%0Aassert_eq!(n.count_ones(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.count_zeros\" class=\"fn\">count_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-5\"><a href=\"#examples-5\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX.count_zeros(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::MAX.count_zeros(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.leading_zeros\" class=\"fn\">leading_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading zeros in the binary representation of <code>self</code>.</p>\n<p>Depending on what you’re doing with the value, you might also be interested in the\n<a href=\"core/primitive.i32.html#method.ilog2\" title=\"method i32::ilog2\"><code>ilog2</code></a> function which returns a consistent number, even if the type widens.</p>\n<h5 id=\"examples-6\"><a href=\"#examples-6\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_zeros(), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i32;%0A%0Aassert_eq!(n.leading_zeros(),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_zeros\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.trailing_zeros\" class=\"fn\">trailing_zeros</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing zeros in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-7\"><a href=\"#examples-7\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">4i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_zeros(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-4i32;%0A%0Aassert_eq!(n.trailing_zeros(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.leading_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.leading_ones\" class=\"fn\">leading_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of leading ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-8\"><a href=\"#examples-8\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = -<span class=\"number\">1i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.leading_ones(), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+-1i32;%0A%0Aassert_eq!(n.leading_ones(),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.trailing_ones\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.46.0, const since 1.46.0\">1.46.0 (const: 1.46.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.trailing_ones\" class=\"fn\">trailing_ones</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of trailing ones in the binary representation of <code>self</code>.</p>\n<h5 id=\"examples-9\"><a href=\"#examples-9\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">3i32</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.trailing_ones(), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+3i32;%0A%0Aassert_eq!(n.trailing_ones(),+2);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_left\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.rotate_left\" class=\"fn\">rotate_left</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the left by a specified amount, <code>n</code>,\nwrapping the truncated bits to the end of the resulting integer.</p>\n<p>Please note this isn’t the same operation as the <code>&lt;&lt;</code> shifting operator!</p>\n<h5 id=\"examples-10\"><a href=\"#examples-10\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x10000b3i32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0xb301</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_left(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x10000b3i32;%0Alet+m+=+0xb301;%0A%0Aassert_eq!(n.rotate_left(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rotate_right\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.rotate_right\" class=\"fn\">rotate_right</a>(self, n: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Shifts the bits to the right by a specified amount, <code>n</code>,\nwrapping the truncated bits to the beginning of the resulting\ninteger.</p>\n<p>Please note this isn’t the same operation as the <code>&gt;&gt;</code> shifting operator!</p>\n<h5 id=\"examples-11\"><a href=\"#examples-11\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0xb301i32</span>;\n<span class=\"kw\">let </span>m = <span class=\"number\">0x10000b3</span>;\n\n<span class=\"macro\">assert_eq!</span>(n.rotate_right(<span class=\"number\">8</span>), m);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0xb301i32;%0Alet+m+=+0x10000b3;%0A%0Aassert_eq!(n.rotate_right(8),+m);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.swap_bytes\" class=\"fn\">swap_bytes</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverses the byte order of the integer.</p>\n<h5 id=\"examples-12\"><a href=\"#examples-12\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678i32</span>;\n\n<span class=\"kw\">let </span>m = n.swap_bytes();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x78563412</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678i32;%0A%0Alet+m+=+n.swap_bytes();%0A%0Aassert_eq!(m,+0x78563412);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reverse_bits\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.37.0, const since 1.37.0\">1.37.0 (const: 1.37.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.reverse_bits\" class=\"fn\">reverse_bits</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Reverses the order of bits in the integer. The least significant bit becomes the most significant bit,\nsecond least-significant bit becomes second most-significant bit, etc.</p>\n<h5 id=\"examples-13\"><a href=\"#examples-13\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x12345678i32</span>;\n<span class=\"kw\">let </span>m = n.reverse_bits();\n\n<span class=\"macro\">assert_eq!</span>(m, <span class=\"number\">0x1e6a2c48</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0</span>, <span class=\"number\">0i32</span>.reverse_bits());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x12345678i32;%0Alet+m+=+n.reverse_bits();%0A%0Aassert_eq!(m,+0x1e6a2c48);%0Aassert_eq!(0,+0i32.reverse_bits());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.from_be\" class=\"fn\">from_be</a>(x: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an integer from big endian to the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-14\"><a href=\"#examples-14\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(i32::from_be(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i32::from_be(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(i32::from_be(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i32::from_be(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.from_le\" class=\"fn\">from_le</a>(x: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts an integer from little endian to the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-15\"><a href=\"#examples-15\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(i32::from_le(n), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(i32::from_le(n), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(i32::from_le(n),+n)%0A%7D+else+%7B%0A++++assert_eq!(i32::from_le(n),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.to_be\" class=\"fn\">to_be</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to big endian from the target’s endianness.</p>\n<p>On big endian this is a no-op. On little endian the bytes are swapped.</p>\n<h5 id=\"examples-16\"><a href=\"#examples-16\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_be(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai32;%0A%0Aif+cfg!(target_endian+=+%22big%22)+%7B%0A++++assert_eq!(n.to_be(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_be(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.to_le\" class=\"fn\">to_le</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>self</code> to little endian from the target’s endianness.</p>\n<p>On little endian this is a no-op. On big endian the bytes are swapped.</p>\n<h5 id=\"examples-17\"><a href=\"#examples-17\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>n = <span class=\"number\">0x1Ai32</span>;\n\n<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"little\"</span>) {\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n)\n} <span class=\"kw\">else </span>{\n    <span class=\"macro\">assert_eq!</span>(n.to_le(), n.swap_bytes())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+n+=+0x1Ai32;%0A%0Aif+cfg!(target_endian+=+%22little%22)+%7B%0A++++assert_eq!(n.to_le(),+n)%0A%7D+else+%7B%0A++++assert_eq!(n.to_le(),+n.swap_bytes())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_add\" class=\"fn\">checked_add</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer addition. Computes <code>self + rhs</code>, returning <code>None</code>\nif overflow occurred.</p>\n<h5 id=\"examples-18\"><a href=\"#examples-18\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i32::MAX - <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).checked_add(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i32::MAX+-+2).checked_add(1),+Some(i32::MAX+-+1));%0Aassert_eq!((i32::MAX+-+2).checked_add(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for unchecked_math\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"core/primitive.i32.html#tymethod.unchecked_add\" class=\"fn\">unchecked_add</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer addition. Computes <code>self + rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety\"><a href=\"#safety\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self + rhs &gt; i32::MAX</code> or <code>self + rhs &lt; i32::MIN</code>,\ni.e. when <a href=\"core/primitive.i32.html#method.checked_add\" title=\"method i32::checked_add\"><code>checked_add</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_add_unsigned\" class=\"fn\">checked_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked addition with an unsigned integer. Computes <code>self + rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-19\"><a href=\"#examples-19\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.checked_add_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).checked_add_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i32.checked_add_unsigned(2),+Some(3));%0Aassert_eq!((i32::MAX+-+2).checked_add_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_sub\" class=\"fn\">checked_sub</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer subtraction. Computes <code>self - rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-20\"><a href=\"#examples-20\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i32::MIN + <span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).checked_sub(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i32::MIN+%2B+2).checked_sub(1),+Some(i32::MIN+%2B+1));%0Aassert_eq!((i32::MIN+%2B+2).checked_sub(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for unchecked_math\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"core/primitive.i32.html#tymethod.unchecked_sub\" class=\"fn\">unchecked_sub</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer subtraction. Computes <code>self - rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-1\"><a href=\"#safety-1\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self - rhs &gt; i32::MAX</code> or <code>self - rhs &lt; i32::MIN</code>,\ni.e. when <a href=\"core/primitive.i32.html#method.checked_sub\" title=\"method i32::checked_sub\"><code>checked_sub</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_sub_unsigned\" class=\"fn\">checked_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nreturning <code>None</code> if overflow occurred.</p>\n<h5 id=\"examples-21\"><a href=\"#examples-21\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.checked_sub_unsigned(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).checked_sub_unsigned(<span class=\"number\">3</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i32.checked_sub_unsigned(2),+Some(-1));%0Aassert_eq!((i32::MIN+%2B+2).checked_sub_unsigned(3),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_mul\" class=\"fn\">checked_mul</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer multiplication. Computes <code>self * rhs</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-22\"><a href=\"#examples-22\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::MAX.checked_mul(<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(i32::MAX));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.checked_mul(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::MAX.checked_mul(1),+Some(i32::MAX));%0Aassert_eq!(i32::MAX.checked_mul(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for unchecked_math\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"core/primitive.i32.html#tymethod.unchecked_mul\" class=\"fn\">unchecked_mul</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_math</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked integer multiplication. Computes <code>self * rhs</code>, assuming overflow\ncannot occur.</p>\n<h5 id=\"safety-2\"><a href=\"#safety-2\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self * rhs &gt; i32::MAX</code> or <code>self * rhs &lt; i32::MIN</code>,\ni.e. when <a href=\"core/primitive.i32.html#method.checked_mul\" title=\"method i32::checked_mul\"><code>checked_mul</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.52.0\">1.0.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_div\" class=\"fn\">checked_div</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer division. Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code>\nor the division results in overflow.</p>\n<h5 id=\"examples-23\"><a href=\"#examples-23\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2147483647</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_div(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i32</span>).checked_div(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i32::MIN+%2B+1).checked_div(-1),+Some(2147483647));%0Aassert_eq!(i32::MIN.checked_div(-1),+None);%0Aassert_eq!((1i32).checked_div(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_div_euclid\" class=\"fn\">checked_div_euclid</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nreturning <code>None</code> if <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-24\"><a href=\"#examples-24\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">2147483647</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_div_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>((<span class=\"number\">1i32</span>).checked_div_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((i32::MIN+%2B+1).checked_div_euclid(-1),+Some(2147483647));%0Aassert_eq!(i32::MIN.checked_div_euclid(-1),+None);%0Aassert_eq!((1i32).checked_div_euclid(0),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_rem\" class=\"fn\">checked_rem</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked integer remainder. Computes <code>self % rhs</code>, returning <code>None</code> if\n<code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-25\"><a href=\"#examples-25\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_rem(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.checked_rem(2),+Some(1));%0Aassert_eq!(5i32.checked_rem(0),+None);%0Aassert_eq!(i32::MIN.checked_rem(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_rem_euclid\" class=\"fn\">checked_rem_euclid</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, returning <code>None</code>\nif <code>rhs == 0</code> or the division results in overflow.</p>\n<h5 id=\"examples-26\"><a href=\"#examples-26\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem_euclid(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_rem_euclid(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_rem_euclid(-<span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.checked_rem_euclid(2),+Some(1));%0Aassert_eq!(5i32.checked_rem_euclid(0),+None);%0Aassert_eq!(i32::MIN.checked_rem_euclid(-1),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_neg\" class=\"fn\">checked_neg</a>(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked negation. Computes <code>-self</code>, returning <code>None</code> if <code>self == MIN</code>.</p>\n<h5 id=\"examples-27\"><a href=\"#examples-27\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_neg(), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_neg(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.checked_neg(),+Some(-5));%0Aassert_eq!(i32::MIN.checked_neg(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for unchecked_neg\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"core/primitive.i32.html#tymethod.unchecked_neg\" class=\"fn\">unchecked_neg</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_neg</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked negation. Computes <code>-self</code>, assuming overflow cannot occur.</p>\n<h5 id=\"safety-3\"><a href=\"#safety-3\">Safety</a></h5>\n<p>This results in undefined behavior when\n<code>self == i32::MIN</code>,\ni.e. when <a href=\"core/primitive.i32.html#method.checked_neg\" title=\"method i32::checked_neg\"><code>checked_neg</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_shl\" class=\"fn\">checked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> if <code>rhs</code> is larger\nthan or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-28\"><a href=\"#examples-28\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.checked_shl(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x10</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.checked_shl(<span class=\"number\">129</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i32.checked_shl(4),+Some(0x10));%0Aassert_eq!(0x1i32.checked_shl(129),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for unchecked_shifts\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"core/primitive.i32.html#tymethod.unchecked_shl\" class=\"fn\">unchecked_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_shifts</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift left. Computes <code>self &lt;&lt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-4\"><a href=\"#safety-4\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"core/primitive.i32.html#method.checked_shl\" title=\"method i32::checked_shl\"><code>checked_shl</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_shr\" class=\"fn\">checked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> if <code>rhs</code> is\nlarger than or equal to the number of bits in <code>self</code>.</p>\n<h5 id=\"examples-29\"><a href=\"#examples-29\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.checked_shr(<span class=\"number\">4</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">0x1</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.checked_shr(<span class=\"number\">128</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i32.checked_shr(4),+Some(0x1));%0Aassert_eq!(0x10i32.checked_shr(128),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unchecked_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85122\" title=\"Tracking issue for unchecked_shifts\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub unsafe fn <a href=\"core/primitive.i32.html#tymethod.unchecked_shr\" class=\"fn\">unchecked_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>unchecked_shifts</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85122\">#85122</a>)</span></div></span></summary><div class=\"docblock\"><p>Unchecked shift right. Computes <code>self &gt;&gt; rhs</code>, assuming that\n<code>rhs</code> is less than the number of bits in <code>self</code>.</p>\n<h5 id=\"safety-5\"><a href=\"#safety-5\">Safety</a></h5>\n<p>This results in undefined behavior if <code>rhs</code> is larger than\nor equal to the number of bits in <code>self</code>,\ni.e. when <a href=\"core/primitive.i32.html#method.checked_shr\" title=\"method i32::checked_shr\"><code>checked_shr</code></a> would return <code>None</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.47.0\">1.13.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_abs\" class=\"fn\">checked_abs</a>(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked absolute value. Computes <code>self.abs()</code>, returning <code>None</code> if\n<code>self == MIN</code>.</p>\n<h5 id=\"examples-30\"><a href=\"#examples-30\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">5i32</span>).checked_abs(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">5</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.checked_abs(), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-5i32).checked_abs(),+Some(5));%0Aassert_eq!(i32::MIN.checked_abs(),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_pow\" class=\"fn\">checked_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><div class=\"docblock\"><p>Checked exponentiation. Computes <code>self.pow(exp)</code>, returning <code>None</code> if\noverflow occurred.</p>\n<h5 id=\"examples-31\"><a href=\"#examples-31\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">8i32</span>.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">64</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.checked_pow(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(8i32.checked_pow(2),+Some(64));%0Aassert_eq!(i32::MAX.checked_pow(2),+None);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"core/primitive.i32.html#tymethod.checked_isqrt\" class=\"fn\">checked_isqrt</a>(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<p>Returns <code>None</code> if <code>self</code> is negative.</p>\n<h5 id=\"examples-32\"><a href=\"#examples-32\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.checked_isqrt(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">3</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.checked_isqrt(),+Some(3));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_add\" class=\"fn\">saturating_add</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer addition. Computes <code>self + rhs</code>, saturating at the numeric\nbounds instead of overflowing.</p>\n<h5 id=\"examples-33\"><a href=\"#examples-33\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_add(<span class=\"number\">1</span>), <span class=\"number\">101</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_add(<span class=\"number\">100</span>), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_add(-<span class=\"number\">1</span>), i32::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.saturating_add(1),+101);%0Aassert_eq!(i32::MAX.saturating_add(100),+i32::MAX);%0Aassert_eq!(i32::MIN.saturating_add(-1),+i32::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_add_unsigned\" class=\"fn\">saturating_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating addition with an unsigned integer. Computes <code>self + rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-34\"><a href=\"#examples-34\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.saturating_add_unsigned(<span class=\"number\">2</span>), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_add_unsigned(<span class=\"number\">100</span>), i32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i32.saturating_add_unsigned(2),+3);%0Aassert_eq!(i32::MAX.saturating_add_unsigned(100),+i32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_sub\" class=\"fn\">saturating_sub</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer subtraction. Computes <code>self - rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-35\"><a href=\"#examples-35\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_sub(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_sub(<span class=\"number\">100</span>), i32::MIN);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_sub(-<span class=\"number\">1</span>), i32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.saturating_sub(127),+-27);%0Aassert_eq!(i32::MIN.saturating_sub(100),+i32::MIN);%0Aassert_eq!(i32::MAX.saturating_sub(-1),+i32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_sub_unsigned\" class=\"fn\">saturating_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating subtraction with an unsigned integer. Computes <code>self - rhs</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-36\"><a href=\"#examples-36\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">27</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_sub_unsigned(<span class=\"number\">100</span>), i32::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.saturating_sub_unsigned(127),+-27);%0Aassert_eq!(i32::MIN.saturating_sub_unsigned(100),+i32::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_neg\" class=\"fn\">saturating_neg</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer negation. Computes <code>-self</code>, returning <code>MAX</code> if <code>self == MIN</code>\ninstead of overflowing.</p>\n<h5 id=\"examples-37\"><a href=\"#examples-37\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).saturating_neg(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_neg(), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_neg(), i32::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.saturating_neg(),+-100);%0Aassert_eq!((-100i32).saturating_neg(),+100);%0Aassert_eq!(i32::MIN.saturating_neg(),+i32::MAX);%0Aassert_eq!(i32::MAX.saturating_neg(),+i32::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0, const since 1.47.0\">1.45.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_abs\" class=\"fn\">saturating_abs</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating absolute value. Computes <code>self.abs()</code>, returning <code>MAX</code> if <code>self == MIN</code> instead of overflowing.</p>\n<h5 id=\"examples-38\"><a href=\"#examples-38\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).saturating_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_abs(), i32::MAX);\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">1</span>).saturating_abs(), i32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.saturating_abs(),+100);%0Aassert_eq!((-100i32).saturating_abs(),+100);%0Aassert_eq!(i32::MIN.saturating_abs(),+i32::MAX);%0Aassert_eq!((i32::MIN+%2B+1).saturating_abs(),+i32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.47.0\">1.7.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_mul\" class=\"fn\">saturating_mul</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer multiplication. Computes <code>self * rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-39\"><a href=\"#examples-39\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.saturating_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_mul(<span class=\"number\">10</span>), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_mul(<span class=\"number\">10</span>), i32::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.saturating_mul(12),+120);%0Aassert_eq!(i32::MAX.saturating_mul(10),+i32::MAX);%0Aassert_eq!(i32::MIN.saturating_mul(10),+i32::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.58.0, const since 1.58.0\">1.58.0 (const: 1.58.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_div\" class=\"fn\">saturating_div</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer division. Computes <code>self / rhs</code>, saturating at the\nnumeric bounds instead of overflowing.</p>\n<h5 id=\"examples-40\"><a href=\"#examples-40\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.saturating_div(<span class=\"number\">2</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.saturating_div(-<span class=\"number\">1</span>), i32::MIN + <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_div(-<span class=\"number\">1</span>), i32::MAX);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.saturating_div(2),+2);%0Aassert_eq!(i32::MAX.saturating_div(-1),+i32::MIN+%2B+1);%0Aassert_eq!(i32::MIN.saturating_div(-1),+i32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n\n<div class=\"example-wrap should_panic\"><a href=\"#\" class=\"tooltip\" title=\"This example panics\">ⓘ</a><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let _ </span>= <span class=\"number\">1i32</span>.saturating_div(<span class=\"number\">0</span>);\n</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+_+=+1i32.saturating_div(0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.saturating_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.saturating_pow\" class=\"fn\">saturating_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Saturating integer exponentiation. Computes <code>self.pow(exp)</code>,\nsaturating at the numeric bounds instead of overflowing.</p>\n<h5 id=\"examples-41\"><a href=\"#examples-41\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">4i32</span>).saturating_pow(<span class=\"number\">3</span>), -<span class=\"number\">64</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_pow(<span class=\"number\">2</span>), i32::MAX);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.saturating_pow(<span class=\"number\">3</span>), i32::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-4i32).saturating_pow(3),+-64);%0Aassert_eq!(i32::MIN.saturating_pow(2),+i32::MAX);%0Aassert_eq!(i32::MIN.saturating_pow(3),+i32::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_add\" class=\"fn\">wrapping_add</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition. Computes <code>self + rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-42\"><a href=\"#examples-42\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_add(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.wrapping_add(<span class=\"number\">2</span>), i32::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_add(27),+127);%0Aassert_eq!(i32::MAX.wrapping_add(2),+i32::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_add_unsigned\" class=\"fn\">wrapping_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) addition with an unsigned integer. Computes\n<code>self + rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-43\"><a href=\"#examples-43\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_add_unsigned(<span class=\"number\">27</span>), <span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.wrapping_add_unsigned(<span class=\"number\">2</span>), i32::MIN + <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_add_unsigned(27),+127);%0Aassert_eq!(i32::MAX.wrapping_add_unsigned(2),+i32::MIN+%2B+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_sub\" class=\"fn\">wrapping_sub</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction. Computes <code>self - rhs</code>, wrapping around at the\nboundary of the type.</p>\n<h5 id=\"examples-44\"><a href=\"#examples-44\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.wrapping_sub(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i32</span>).wrapping_sub(i32::MAX), i32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i32.wrapping_sub(127),+-127);%0Aassert_eq!((-2i32).wrapping_sub(i32::MAX),+i32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_sub_unsigned\" class=\"fn\">wrapping_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) subtraction with an unsigned integer. Computes\n<code>self - rhs</code>, wrapping around at the boundary of the type.</p>\n<h5 id=\"examples-45\"><a href=\"#examples-45\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.wrapping_sub_unsigned(<span class=\"number\">127</span>), -<span class=\"number\">127</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">2i32</span>).wrapping_sub_unsigned(u32::MAX), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0i32.wrapping_sub_unsigned(127),+-127);%0Aassert_eq!((-2i32).wrapping_sub_unsigned(u32::MAX),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_mul\" class=\"fn\">wrapping_mul</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) multiplication. Computes <code>self * rhs</code>, wrapping around at\nthe boundary of the type.</p>\n<h5 id=\"examples-46\"><a href=\"#examples-46\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.wrapping_mul(<span class=\"number\">12</span>), <span class=\"number\">120</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">11i8</span>.wrapping_mul(<span class=\"number\">12</span>), -<span class=\"number\">124</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.wrapping_mul(12),+120);%0Aassert_eq!(11i8.wrapping_mul(12),+-124);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_div\" class=\"fn\">wrapping_div</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) division. Computes <code>self / rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>The only case where such wrapping can occur is when one divides <code>MIN / -1</code> on a signed type (where\n<code>MIN</code> is the negative minimal value for the type); this is equivalent to <code>-MIN</code>, a positive value\nthat is too large to represent in the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-1\"><a href=\"#panics-1\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-47\"><a href=\"#examples-47\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_div(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_div(10),+10);%0Aassert_eq!((-128i8).wrapping_div(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_div_euclid\" class=\"fn\">wrapping_div_euclid</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean division. Computes <code>self.div_euclid(rhs)</code>,\nwrapping around at the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). This is equivalent to <code>-MIN</code>, a positive value that is too large to represent in the\ntype. In this case, this method returns <code>MIN</code> itself.</p>\n<h5 id=\"panics-2\"><a href=\"#panics-2\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-48\"><a href=\"#examples-48\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_div_euclid(<span class=\"number\">10</span>), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_div_euclid(-<span class=\"number\">1</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_div_euclid(10),+10);%0Aassert_eq!((-128i8).wrapping_div_euclid(-1),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.52.0\">1.2.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_rem\" class=\"fn\">wrapping_rem</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) remainder. Computes <code>self % rhs</code>, wrapping around at the\nboundary of the type.</p>\n<p>Such wrap-around never actually occurs mathematically; implementation artifacts make <code>x % y</code>\ninvalid for <code>MIN / -1</code> on a signed type (where <code>MIN</code> is the negative minimal value). In such a case,\nthis function returns <code>0</code>.</p>\n<h5 id=\"panics-3\"><a href=\"#panics-3\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-49\"><a href=\"#examples-49\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_rem(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_rem(10),+0);%0Aassert_eq!((-128i8).wrapping_rem(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_rem_euclid\" class=\"fn\">wrapping_rem_euclid</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping Euclidean remainder. Computes <code>self.rem_euclid(rhs)</code>, wrapping around\nat the boundary of the type.</p>\n<p>Wrapping will only occur in <code>MIN % -1</code> on a signed type (where <code>MIN</code> is the negative minimal value\nfor the type). In this case, this method returns 0.</p>\n<h5 id=\"panics-4\"><a href=\"#panics-4\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-50\"><a href=\"#examples-50\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_rem_euclid(<span class=\"number\">10</span>), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_rem_euclid(-<span class=\"number\">1</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_rem_euclid(10),+0);%0Aassert_eq!((-128i8).wrapping_rem_euclid(-1),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_neg\" class=\"fn\">wrapping_neg</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) negation. Computes <code>-self</code>, wrapping around at the boundary\nof the type.</p>\n<p>The only case where such wrapping can occur is when one negates <code>MIN</code> on a signed type (where <code>MIN</code>\nis the negative minimal value for the type); this is a positive value that is too large to represent\nin the type. In such a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-51\"><a href=\"#examples-51\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_neg(), -<span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.wrapping_neg(), i32::MIN);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_neg(),+-100);%0Aassert_eq!(i32::MIN.wrapping_neg(),+i32::MIN);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_shl\" class=\"fn\">wrapping_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, where <code>mask</code> removes\nany high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-left; the RHS of a wrapping shift-left is restricted to\nthe range of the type, rather than the bits shifted out of the LHS being returned to the other end.\nThe primitive integer types all implement a <a href=\"core/primitive.i32.html#method.rotate_left\" title=\"method i32::rotate_left\"><code>rotate_left</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-52\"><a href=\"#examples-52\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i32</span>).wrapping_shl(<span class=\"number\">7</span>), -<span class=\"number\">128</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i32</span>).wrapping_shl(<span class=\"number\">128</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-1i32).wrapping_shl(7),+-128);%0Aassert_eq!((-1i32).wrapping_shl(128),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.2.0, const since 1.32.0\">1.2.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_shr\" class=\"fn\">wrapping_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, where <code>mask</code>\nremoves any high-order bits of <code>rhs</code> that would cause the shift to exceed the bitwidth of the type.</p>\n<p>Note that this is <em>not</em> the same as a rotate-right; the RHS of a wrapping shift-right is restricted\nto the range of the type, rather than the bits shifted out of the LHS being returned to the other\nend. The primitive integer types all implement a <a href=\"core/primitive.i32.html#method.rotate_right\" title=\"method i32::rotate_right\"><code>rotate_right</code></a> function,\nwhich may be what you want instead.</p>\n<h5 id=\"examples-53\"><a href=\"#examples-53\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i32</span>).wrapping_shr(<span class=\"number\">7</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i16</span>).wrapping_shr(<span class=\"number\">64</span>), -<span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!((-128i32).wrapping_shr(7),+-1);%0Aassert_eq!((-128i16).wrapping_shr(64),+-128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_abs\" class=\"fn\">wrapping_abs</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) absolute value. Computes <code>self.abs()</code>, wrapping around at\nthe boundary of the type.</p>\n<p>The only case where such wrapping can occur is when one takes the absolute value of the negative\nminimal value for the type; this is a positive value that is too large to represent in the type. In\nsuch a case, this function returns <code>MIN</code> itself.</p>\n<h5 id=\"examples-54\"><a href=\"#examples-54\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).wrapping_abs(), <span class=\"number\">100</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.wrapping_abs(), i32::MIN);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).wrapping_abs() <span class=\"kw\">as </span>u8, <span class=\"number\">128</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.wrapping_abs(),+100);%0Aassert_eq!((-100i32).wrapping_abs(),+100);%0Aassert_eq!(i32::MIN.wrapping_abs(),+i32::MIN);%0Aassert_eq!((-128i8).wrapping_abs()+as+u8,+128);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unsigned_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.51.0, const since 1.51.0\">1.51.0 (const: 1.51.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.unsigned_abs\" class=\"fn\">unsigned_abs</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code> without any wrapping\nor panicking.</p>\n<h5 id=\"examples-55\"><a href=\"#examples-55\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.unsigned_abs(), <span class=\"number\">100u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).unsigned_abs(), <span class=\"number\">100u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">128i8</span>).unsigned_abs(), <span class=\"number\">128u8</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.unsigned_abs(),+100u32);%0Aassert_eq!((-100i32).unsigned_abs(),+100u32);%0Aassert_eq!((-128i8).unsigned_abs(),+128u8);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.wrapping_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.wrapping_pow\" class=\"fn\">wrapping_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Wrapping (modular) exponentiation. Computes <code>self.pow(exp)</code>,\nwrapping around at the boundary of the type.</p>\n<h5 id=\"examples-56\"><a href=\"#examples-56\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i32</span>.wrapping_pow(<span class=\"number\">4</span>), <span class=\"number\">81</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">5</span>), -<span class=\"number\">13</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.wrapping_pow(<span class=\"number\">6</span>), -<span class=\"number\">39</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i32.wrapping_pow(4),+81);%0Aassert_eq!(3i8.wrapping_pow(5),+-13);%0Aassert_eq!(3i8.wrapping_pow(6),+-39);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_add\" class=\"fn\">overflowing_add</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-57\"><a href=\"#examples-57\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_add(<span class=\"number\">2</span>), (<span class=\"number\">7</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MAX.overflowing_add(<span class=\"number\">1</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_add(2),+(7,+false));%0Aassert_eq!(i32::MAX.overflowing_add(1),+(i32::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.carrying_add\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"core/primitive.i32.html#tymethod.carrying_add\" class=\"fn\">carrying_add</a>(self, rhs: Self, carry: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> + <code>carry</code> and checks for overflow.</p>\n<p>Performs “ternary addition” of two integer operands and a carry-in\nbit, and returns a tuple of the sum along with a boolean indicating\nwhether an arithmetic overflow would occur. On overflow, the wrapped\nvalue is returned.</p>\n<p>This allows chaining together multiple additions to create a wider\naddition, and can be useful for bignum addition. This method should\nonly be used for the most significant word; for the less significant\nwords the unsigned method\n<a href=\"core/primitive.u32.html#method.carrying_add\" title=\"method u32::carrying_add\"><code>u32::carrying_add</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a carry flag,\nand should <em>not</em> be added to a more significant word.</p>\n<p>If the input carry is false, this method is equivalent to\n<a href=\"core/primitive.i32.html#method.overflowing_add\" title=\"method i32::overflowing_add\"><code>overflowing_add</code></a>.</p>\n<h5 id=\"examples-58\"><a href=\"#examples-58\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//   10  MAX    (a = 10 × 2^32 + 2^32 - 1)\n// + -5    9    (b = -5 × 2^32 + 9)\n// ---------\n//    6    8    (sum = 6 × 2^32 + 8)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i32, u32) = (<span class=\"number\">10</span>, u32::MAX);\n<span class=\"kw\">let </span>(b1, b0): (i32, u32) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>carry0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u32::carrying_add for the less significant words\n</span><span class=\"kw\">let </span>(sum0, carry1) = a0.carrying_add(b0, carry0);\n<span class=\"macro\">assert_eq!</span>(carry1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i32::carrying_add for the most significant word\n</span><span class=\"kw\">let </span>(sum1, overflow) = a1.carrying_add(b1, carry1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((sum1, sum0), (<span class=\"number\">6</span>, <span class=\"number\">8</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//+++10++MAX++++(a+=+10+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A//+%2B+-5++++9++++(b+=+-5+%C3%97+2%5E32+%2B+9)%0A//+---------%0A//++++6++++8++++(sum+=+6+%C3%97+2%5E32+%2B+8)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i32,+u32)+=+(10,+u32::MAX);%0Alet+(b1,+b0):+(i32,+u32)+=+(-5,+9);%0Alet+carry0+=+false;%0A%0A//+u32::carrying_add+for+the+less+significant+words%0Alet+(sum0,+carry1)+=+a0.carrying_add(b0,+carry0);%0Aassert_eq!(carry1,+true);%0A%0A//+i32::carrying_add+for+the+most+significant+word%0Alet+(sum1,+overflow)+=+a1.carrying_add(b1,+carry1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((sum1,+sum0),+(6,+8));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_add_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_add_unsigned\" class=\"fn\">overflowing_add_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> + <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the addition along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-59\"><a href=\"#examples-59\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.overflowing_add_unsigned(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN).overflowing_add_unsigned(u32::MAX), (i32::MAX, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX - <span class=\"number\">2</span>).overflowing_add_unsigned(<span class=\"number\">3</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i32.overflowing_add_unsigned(2),+(3,+false));%0Aassert_eq!((i32::MIN).overflowing_add_unsigned(u32::MAX),+(i32::MAX,+false));%0Aassert_eq!((i32::MAX+-+2).overflowing_add_unsigned(3),+(i32::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_sub\" class=\"fn\">overflowing_sub</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-60\"><a href=\"#examples-60\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_sub(<span class=\"number\">2</span>), (<span class=\"number\">3</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_sub(<span class=\"number\">1</span>), (i32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_sub(2),+(3,+false));%0Aassert_eq!(i32::MIN.overflowing_sub(1),+(i32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.borrowing_sub\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/85532\" title=\"Tracking issue for const_bigint_helper_methods\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"core/primitive.i32.html#tymethod.borrowing_sub\" class=\"fn\">borrowing_sub</a>(self, rhs: Self, borrow: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>bigint_helper_methods</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/85532\">#85532</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates <code>self</code> − <code>rhs</code> − <code>borrow</code> and checks for\noverflow.</p>\n<p>Performs “ternary subtraction” by subtracting both an integer\noperand and a borrow-in bit from <code>self</code>, and returns a tuple of the\ndifference along with a boolean indicating whether an arithmetic\noverflow would occur. On overflow, the wrapped value is returned.</p>\n<p>This allows chaining together multiple subtractions to create a\nwider subtraction, and can be useful for bignum subtraction. This\nmethod should only be used for the most significant word; for the\nless significant words the unsigned method\n<a href=\"core/primitive.u32.html#method.borrowing_sub\" title=\"method u32::borrowing_sub\"><code>u32::borrowing_sub</code></a>\nshould be used.</p>\n<p>The output boolean returned by this method is <em>not</em> a borrow flag,\nand should <em>not</em> be subtracted from a more significant word.</p>\n<p>If the input borrow is false, this method is equivalent to\n<a href=\"core/primitive.i32.html#method.overflowing_sub\" title=\"method i32::overflowing_sub\"><code>overflowing_sub</code></a>.</p>\n<h5 id=\"examples-61\"><a href=\"#examples-61\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(bigint_helper_methods)]\n</span><span class=\"comment\">// Only the most significant word is signed.\n//\n//    6    8    (a = 6 × 2^32 + 8)\n// - -5    9    (b = -5 × 2^32 + 9)\n// ---------\n//   10  MAX    (diff = 10 × 2^32 + 2^32 - 1)\n\n</span><span class=\"kw\">let </span>(a1, a0): (i32, u32) = (<span class=\"number\">6</span>, <span class=\"number\">8</span>);\n<span class=\"kw\">let </span>(b1, b0): (i32, u32) = (-<span class=\"number\">5</span>, <span class=\"number\">9</span>);\n<span class=\"kw\">let </span>borrow0 = <span class=\"bool-val\">false</span>;\n\n<span class=\"comment\">// u32::borrowing_sub for the less significant words\n</span><span class=\"kw\">let </span>(diff0, borrow1) = a0.borrowing_sub(b0, borrow0);\n<span class=\"macro\">assert_eq!</span>(borrow1, <span class=\"bool-val\">true</span>);\n\n<span class=\"comment\">// i32::borrowing_sub for the most significant word\n</span><span class=\"kw\">let </span>(diff1, overflow) = a1.borrowing_sub(b1, borrow1);\n<span class=\"macro\">assert_eq!</span>(overflow, <span class=\"bool-val\">false</span>);\n\n<span class=\"macro\">assert_eq!</span>((diff1, diff0), (<span class=\"number\">10</span>, u32::MAX));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(bigint_helper_methods)%5D%0A//+Only+the+most+significant+word+is+signed.%0A//%0A//++++6++++8++++(a+=+6+%C3%97+2%5E32+%2B+8)%0A//+-+-5++++9++++(b+=+-5+%C3%97+2%5E32+%2B+9)%0A//+---------%0A//+++10++MAX++++(diff+=+10+%C3%97+2%5E32+%2B+2%5E32+-+1)%0A%0Afn+main()+%7B%0Alet+(a1,+a0):+(i32,+u32)+=+(6,+8);%0Alet+(b1,+b0):+(i32,+u32)+=+(-5,+9);%0Alet+borrow0+=+false;%0A%0A//+u32::borrowing_sub+for+the+less+significant+words%0Alet+(diff0,+borrow1)+=+a0.borrowing_sub(b0,+borrow0);%0Aassert_eq!(borrow1,+true);%0A%0A//+i32::borrowing_sub+for+the+most+significant+word%0Alet+(diff1,+overflow)+=+a1.borrowing_sub(b1,+borrow1);%0Aassert_eq!(overflow,+false);%0A%0Aassert_eq!((diff1,+diff0),+(10,+u32::MAX));%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_sub_unsigned\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.66.0, const since 1.66.0\">1.66.0 (const: 1.66.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_sub_unsigned\" class=\"fn\">overflowing_sub_unsigned</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates <code>self</code> - <code>rhs</code> with an unsigned <code>rhs</code></p>\n<p>Returns a tuple of the subtraction along with a boolean indicating\nwhether an arithmetic overflow would occur. If an overflow would\nhave occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-62\"><a href=\"#examples-62\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">1i32</span>.overflowing_sub_unsigned(<span class=\"number\">2</span>), (-<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MAX).overflowing_sub_unsigned(u32::MAX), (i32::MIN, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN + <span class=\"number\">2</span>).overflowing_sub_unsigned(<span class=\"number\">3</span>), (i32::MAX, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(1i32.overflowing_sub_unsigned(2),+(-1,+false));%0Aassert_eq!((i32::MAX).overflowing_sub_unsigned(u32::MAX),+(i32::MIN,+false));%0Aassert_eq!((i32::MIN+%2B+2).overflowing_sub_unsigned(3),+(i32::MAX,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_mul\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_mul\" class=\"fn\">overflowing_mul</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the multiplication of <code>self</code> and <code>rhs</code>.</p>\n<p>Returns a tuple of the multiplication along with a boolean indicating whether an arithmetic overflow\nwould occur. If an overflow would have occurred then the wrapped value is returned.</p>\n<h5 id=\"examples-63\"><a href=\"#examples-63\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_mul(<span class=\"number\">2</span>), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_000_000_000i32</span>.overflowing_mul(<span class=\"number\">10</span>), (<span class=\"number\">1410065408</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_mul(2),+(10,+false));%0Aassert_eq!(1_000_000_000i32.overflowing_mul(10),+(1410065408,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_div\" class=\"fn\">overflowing_div</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the divisor when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then self is returned.</p>\n<h5 id=\"panics-5\"><a href=\"#panics-5\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-64\"><a href=\"#examples-64\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_div(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_div(-<span class=\"number\">1</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_div(2),+(2,+false));%0Aassert_eq!(i32::MIN.overflowing_div(-1),+(i32::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_div_euclid\" class=\"fn\">overflowing_div_euclid</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division <code>self.div_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the divisor along with a boolean indicating whether an arithmetic overflow would\noccur. If an overflow would occur then <code>self</code> is returned.</p>\n<h5 id=\"panics-6\"><a href=\"#panics-6\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-65\"><a href=\"#examples-65\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_div_euclid(<span class=\"number\">2</span>), (<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_div_euclid(-<span class=\"number\">1</span>), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_div_euclid(2),+(2,+false));%0Aassert_eq!(i32::MIN.overflowing_div_euclid(-1),+(i32::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.52.0\">1.7.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_rem\" class=\"fn\">overflowing_rem</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Calculates the remainder when <code>self</code> is divided by <code>rhs</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-7\"><a href=\"#panics-7\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-66\"><a href=\"#examples-66\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_rem(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_rem(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_rem(2),+(1,+false));%0Aassert_eq!(i32::MIN.overflowing_rem(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_rem_euclid\" class=\"fn\">overflowing_rem_euclid</a>(self, rhs: Self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Overflowing Euclidean remainder. Calculates <code>self.rem_euclid(rhs)</code>.</p>\n<p>Returns a tuple of the remainder after dividing along with a boolean indicating whether an\narithmetic overflow would occur. If an overflow would occur then 0 is returned.</p>\n<h5 id=\"panics-8\"><a href=\"#panics-8\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0.</p>\n<h5 id=\"examples-67\"><a href=\"#examples-67\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.overflowing_rem_euclid(<span class=\"number\">2</span>), (<span class=\"number\">1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_rem_euclid(-<span class=\"number\">1</span>), (<span class=\"number\">0</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.overflowing_rem_euclid(2),+(1,+false));%0Aassert_eq!(i32::MIN.overflowing_rem_euclid(-1),+(0,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_neg\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_neg\" class=\"fn\">overflowing_neg</a>(self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Negates self, overflowing if this is equal to the minimum value.</p>\n<p>Returns a tuple of the negated version of self along with a boolean indicating whether an overflow\nhappened. If <code>self</code> is the minimum value (e.g., <code>i32::MIN</code> for values of type <code>i32</code>), then the\nminimum value will be returned again and <code>true</code> will be returned for an overflow happening.</p>\n<h5 id=\"examples-68\"><a href=\"#examples-68\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i32</span>.overflowing_neg(), (-<span class=\"number\">2</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(i32::MIN.overflowing_neg(), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i32.overflowing_neg(),+(-2,+false));%0Aassert_eq!(i32::MIN.overflowing_neg(),+(i32::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shl\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_shl\" class=\"fn\">overflowing_shl</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self left by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-69\"><a href=\"#examples-69\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">4</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x1i32</span>.overflowing_shl(<span class=\"number\">36</span>), (<span class=\"number\">0x10</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x1i32.overflowing_shl(4),+(0x10,+false));%0Aassert_eq!(0x1i32.overflowing_shl(36),+(0x10,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_shr\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.7.0, const since 1.32.0\">1.7.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_shr\" class=\"fn\">overflowing_shr</a>(self, rhs: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Shifts self right by <code>rhs</code> bits.</p>\n<p>Returns a tuple of the shifted version of self along with a boolean indicating whether the shift\nvalue was larger than or equal to the number of bits. If the shift value is too large, then value is\nmasked (N-1) where N is the number of bits, and this value is then used to perform the shift.</p>\n<h5 id=\"examples-70\"><a href=\"#examples-70\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">4</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0x10i32</span>.overflowing_shr(<span class=\"number\">36</span>), (<span class=\"number\">0x1</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(0x10i32.overflowing_shr(4),+(0x1,+false));%0Aassert_eq!(0x10i32.overflowing_shr(36),+(0x1,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.13.0, const since 1.32.0\">1.13.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_abs\" class=\"fn\">overflowing_abs</a>(self) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<p>Returns a tuple of the absolute version of self along with a boolean indicating whether an overflow\nhappened. If self is the minimum value\n(e.g., i32::MIN for values of type i32),\nthen the minimum value will be returned again and true will be returned\nfor an overflow happening.</p>\n<h5 id=\"examples-71\"><a href=\"#examples-71\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i32</span>).overflowing_abs(), (<span class=\"number\">10</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>((i32::MIN).overflowing_abs(), (i32::MIN, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.overflowing_abs(),+(10,+false));%0Aassert_eq!((-10i32).overflowing_abs(),+(10,+false));%0Aassert_eq!((i32::MIN).overflowing_abs(),+(i32::MIN,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.overflowing_pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0, const since 1.50.0\">1.34.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.overflowing_pow\" class=\"fn\">overflowing_pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; (Self, <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>)</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<p>Returns a tuple of the exponentiation along with a bool indicating\nwhether an overflow happened.</p>\n<h5 id=\"examples-72\"><a href=\"#examples-72\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i32</span>.overflowing_pow(<span class=\"number\">4</span>), (<span class=\"number\">81</span>, <span class=\"bool-val\">false</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">3i8</span>.overflowing_pow(<span class=\"number\">5</span>), (-<span class=\"number\">13</span>, <span class=\"bool-val\">true</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(3i32.overflowing_pow(4),+(81,+false));%0Aassert_eq!(3i8.overflowing_pow(5),+(-13,+true));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.pow\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.50.0\">1.0.0 (const: 1.50.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.pow\" class=\"fn\">pow</a>(self, exp: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Raises self to the power of <code>exp</code>, using exponentiation by squaring.</p>\n<h5 id=\"examples-73\"><a href=\"#examples-73\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>x: i32 = <span class=\"number\">2</span>; <span class=\"comment\">// or any other integer type\n\n</span><span class=\"macro\">assert_eq!</span>(x.pow(<span class=\"number\">5</span>), <span class=\"number\">32</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+x:+i32+=+2;+//+or+any+other+integer+type%0A%0Aassert_eq!(x.pow(5),+32);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.isqrt\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/116226\" title=\"Tracking issue for isqrt\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"core/primitive.i32.html#tymethod.isqrt\" class=\"fn\">isqrt</a>(self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>isqrt</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/116226\">#116226</a>)</span></div></span></summary><div class=\"docblock\"><p>Returns the square root of the number, rounded down.</p>\n<h5 id=\"panics-9\"><a href=\"#panics-9\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is negative.</p>\n<h5 id=\"examples-74\"><a href=\"#examples-74\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(isqrt)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.isqrt(), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(isqrt)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.isqrt(),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.div_euclid\" class=\"fn\">div_euclid</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Calculates the quotient of Euclidean division of <code>self</code> by <code>rhs</code>.</p>\n<p>This computes the integer <code>q</code> such that <code>self = q * rhs + r</code>, with\n<code>r = self.rem_euclid(rhs)</code> and <code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<p>In other words, the result is <code>self / rhs</code> rounded to the integer <code>q</code>\nsuch that <code>self &gt;= q * rhs</code>.\nIf <code>self &gt; 0</code>, this is equal to round towards zero (the default in Rust);\nif <code>self &lt; 0</code>, this is equal to round towards +/- infinity.</p>\n<h5 id=\"panics-10\"><a href=\"#panics-10\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-75\"><a href=\"#examples-75\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i32 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_euclid(b), <span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= 4 * 1\n</span><span class=\"macro\">assert_eq!</span>(a.div_euclid(-b), -<span class=\"number\">1</span>); <span class=\"comment\">// 7 &gt;= -4 * -1\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(b), -<span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= 4 * -2\n</span><span class=\"macro\">assert_eq!</span>((-a).div_euclid(-b), <span class=\"number\">2</span>); <span class=\"comment\">// -7 &gt;= -4 * 2</span></code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i32+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.div_euclid(b),+1);+//+7+%3E=+4+*+1%0Aassert_eq!(a.div_euclid(-b),+-1);+//+7+%3E=+-4+*+-1%0Aassert_eq!((-a).div_euclid(b),+-2);+//+-7+%3E=+4+*+-2%0Aassert_eq!((-a).div_euclid(-b),+2);+//+-7+%3E=+-4+*+2%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_euclid\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.38.0, const since 1.52.0\">1.38.0 (const: 1.52.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.rem_euclid\" class=\"fn\">rem_euclid</a>(self, rhs: Self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Calculates the least nonnegative remainder of <code>self (mod rhs)</code>.</p>\n<p>This is done as if by the Euclidean division algorithm – given\n<code>r = self.rem_euclid(rhs)</code>, <code>self = rhs * self.div_euclid(rhs) + r</code>, and\n<code>0 &lt;= r &lt; abs(rhs)</code>.</p>\n<h5 id=\"panics-11\"><a href=\"#panics-11\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is 0 or the division results in overflow.</p>\n<h5 id=\"examples-76\"><a href=\"#examples-76\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>a: i32 = <span class=\"number\">7</span>; <span class=\"comment\">// or any other integer type\n</span><span class=\"kw\">let </span>b = <span class=\"number\">4</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(b), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(a.rem_euclid(-b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).rem_euclid(-b), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+a:+i32+=+7;+//+or+any+other+integer+type%0Alet+b+=+4;%0A%0Aassert_eq!(a.rem_euclid(b),+3);%0Aassert_eq!((-a).rem_euclid(b),+1);%0Aassert_eq!(a.rem_euclid(-b),+3);%0Aassert_eq!((-a).rem_euclid(-b),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_floor\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#335-354\">source</a><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.div_floor\" class=\"fn\">div_floor</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards negative infinity.</p>\n<h5 id=\"panics-12\"><a href=\"#panics-12\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior\"><a href=\"#overflow-behavior\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-77\"><a href=\"#examples-77\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i32 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_floor(b), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_floor(-b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(b), -<span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_floor(-b), <span class=\"number\">2</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i32+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_floor(b),+2);%0Aassert_eq!(a.div_floor(-b),+-3);%0Aassert_eq!((-a).div_floor(b),+-3);%0Aassert_eq!((-a).div_floor(-b),+2);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_ceil\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#335-354\">source</a><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.div_ceil\" class=\"fn\">div_ceil</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the quotient of <code>self</code> and <code>rhs</code>, rounding the result towards positive infinity.</p>\n<h5 id=\"panics-13\"><a href=\"#panics-13\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-1\"><a href=\"#overflow-behavior-1\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-78\"><a href=\"#examples-78\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"kw\">let </span>a: i32 = <span class=\"number\">8</span>;\n<span class=\"kw\">let </span>b = <span class=\"number\">3</span>;\n\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(b), <span class=\"number\">3</span>);\n<span class=\"macro\">assert_eq!</span>(a.div_ceil(-b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(b), -<span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>((-a).div_ceil(-b), <span class=\"number\">3</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Alet+a:+i32+=+8;%0Alet+b+=+3;%0A%0Aassert_eq!(a.div_ceil(b),+3);%0Aassert_eq!(a.div_ceil(-b),+-2);%0Aassert_eq!((-a).div_ceil(b),+-2);%0Aassert_eq!((-a).div_ceil(-b),+3);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.next_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#335-354\">source</a><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.next_multiple_of\" class=\"fn\">next_multiple_of</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>.</p>\n<h5 id=\"panics-14\"><a href=\"#panics-14\">Panics</a></h5>\n<p>This function will panic if <code>rhs</code> is zero.</p>\n<h6 id=\"overflow-behavior-2\"><a href=\"#overflow-behavior-2\">Overflow behavior</a></h6>\n<p>On overflow, this function will panic if overflow checks are enabled (default in debug\nmode) and wrap if overflow checks are disabled (default in release mode).</p>\n<h5 id=\"examples-79\"><a href=\"#examples-79\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.next_multiple_of(<span class=\"number\">8</span>), <span class=\"number\">24</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.next_multiple_of(-<span class=\"number\">8</span>), <span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).next_multiple_of(<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">16</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).next_multiple_of(-<span class=\"number\">8</span>), -<span class=\"number\">24</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i32.next_multiple_of(8),+16);%0Aassert_eq!(23_i32.next_multiple_of(8),+24);%0Aassert_eq!(16_i32.next_multiple_of(-8),+16);%0Aassert_eq!(23_i32.next_multiple_of(-8),+16);%0Aassert_eq!((-16_i32).next_multiple_of(8),+-16);%0Aassert_eq!((-23_i32).next_multiple_of(8),+-16);%0Aassert_eq!((-16_i32).next_multiple_of(-8),+-16);%0Aassert_eq!((-23_i32).next_multiple_of(-8),+-24);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_next_multiple_of\" class=\"method\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#335-354\">source</a><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_next_multiple_of\" class=\"fn\">checked_next_multiple_of</a>(self, rhs: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>int_roundings</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/88581\">#88581</a>)</span></div></span></summary><div class=\"docblock\"><p>If <code>rhs</code> is positive, calculates the smallest value greater than or\nequal to <code>self</code> that is a multiple of <code>rhs</code>. If <code>rhs</code> is negative,\ncalculates the largest value less than or equal to <code>self</code> that is a\nmultiple of <code>rhs</code>. Returns <code>None</code> if <code>rhs</code> is zero or the operation\nwould result in overflow.</p>\n<h5 id=\"examples-80\"><a href=\"#examples-80\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(int_roundings)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">16_i32</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">23_i32</span>.checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).checked_next_multiple_of(<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">16_i32</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">16</span>));\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">23_i32</span>).checked_next_multiple_of(-<span class=\"number\">8</span>), <span class=\"prelude-val\">Some</span>(-<span class=\"number\">24</span>));\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1_i32</span>.checked_next_multiple_of(<span class=\"number\">0</span>), <span class=\"prelude-val\">None</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MAX.checked_next_multiple_of(<span class=\"number\">2</span>), <span class=\"prelude-val\">None</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(int_roundings)%5D%0Afn+main()+%7B%0Aassert_eq!(16_i32.checked_next_multiple_of(8),+Some(16));%0Aassert_eq!(23_i32.checked_next_multiple_of(8),+Some(24));%0Aassert_eq!(16_i32.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!(23_i32.checked_next_multiple_of(-8),+Some(16));%0Aassert_eq!((-16_i32).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-23_i32).checked_next_multiple_of(8),+Some(-16));%0Aassert_eq!((-16_i32).checked_next_multiple_of(-8),+Some(-16));%0Aassert_eq!((-23_i32).checked_next_multiple_of(-8),+Some(-24));%0Aassert_eq!(1_i32.checked_next_multiple_of(0),+None);%0Aassert_eq!(i32::MAX.checked_next_multiple_of(2),+None);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.midpoint\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/110840\" title=\"Tracking issue for const_num_midpoint\">unstable</a></span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"core/primitive.i32.html#tymethod.midpoint\" class=\"fn\">midpoint</a>(self, rhs: Self) -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>num_midpoint</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/110840\">#110840</a>)</span></div></span></summary><div class=\"docblock\"><p>Calculates the middle point of <code>self</code> and <code>rhs</code>.</p>\n<p><code>midpoint(a, b)</code> is <code>(a + b) &gt;&gt; 1</code> as if it were performed in a\nsufficiently-large signed integral type. This implies that the result is\nalways rounded towards negative infinity and that no overflow will ever occur.</p>\n<h5 id=\"examples-81\"><a href=\"#examples-81\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#![feature(num_midpoint)]\n</span><span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.midpoint(<span class=\"number\">4</span>), <span class=\"number\">2</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.midpoint(-<span class=\"number\">1</span>), -<span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">1i32</span>).midpoint(<span class=\"number\">0</span>), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0A%23!%5Bfeature(num_midpoint)%5D%0Afn+main()+%7B%0Aassert_eq!(0i32.midpoint(4),+2);%0Aassert_eq!(0i32.midpoint(-1),+-1);%0Aassert_eq!((-1i32).midpoint(0),+-1);%0A%7D&amp;version=nightly&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.ilog\" class=\"fn\">ilog</a>(self, base: Self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>ilog2</code> can produce results more efficiently for base 2, and <code>ilog10</code>\ncan produce results more efficiently for base 10.</p>\n<h5 id=\"panics-15\"><a href=\"#panics-15\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero,\nor if <code>base</code> is less than 2.</p>\n<h5 id=\"examples-82\"><a href=\"#examples-82\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.ilog(<span class=\"number\">5</span>), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.ilog(5),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.ilog2\" class=\"fn\">ilog2</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-16\"><a href=\"#panics-16\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"examples-83\"><a href=\"#examples-83\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i32</span>.ilog2(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i32.ilog2(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.ilog10\" class=\"fn\">ilog10</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<h5 id=\"panics-17\"><a href=\"#panics-17\">Panics</a></h5>\n<p>This function will panic if <code>self</code> is less than or equal to zero.</p>\n<h5 id=\"example\"><a href=\"#example\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.ilog10(), <span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.ilog10(),+1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_ilog\" class=\"fn\">checked_ilog</a>(self, base: Self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the logarithm of the number with respect to an arbitrary base,\nrounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero, or if the base is not at least 2.</p>\n<p>This method might not be optimized owing to implementation details;\n<code>checked_ilog2</code> can produce results more efficiently for base 2, and\n<code>checked_ilog10</code> can produce results more efficiently for base 10.</p>\n<h5 id=\"examples-84\"><a href=\"#examples-84\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">5i32</span>.checked_ilog(<span class=\"number\">5</span>), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(5i32.checked_ilog(5),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog2\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_ilog2\" class=\"fn\">checked_ilog2</a>(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 2 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"examples-85\"><a href=\"#examples-85\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">2i32</span>.checked_ilog2(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(2i32.checked_ilog2(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.checked_ilog10\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.67.0, const since 1.67.0\">1.67.0 (const: 1.67.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.checked_ilog10\" class=\"fn\">checked_ilog10</a>(self) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the base 10 logarithm of the number, rounded down.</p>\n<p>Returns <code>None</code> if the number is negative or zero.</p>\n<h5 id=\"example-1\"><a href=\"#example-1\">Example</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.checked_ilog10(), <span class=\"prelude-val\">Some</span>(<span class=\"number\">1</span>));</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.checked_ilog10(),+Some(1));%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.abs\" class=\"fn\">abs</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Computes the absolute value of <code>self</code>.</p>\n<h5 id=\"overflow-behavior-3\"><a href=\"#overflow-behavior-3\">Overflow behavior</a></h5>\n<p>The absolute value of\n<code>i32::MIN</code>\ncannot be represented as an\n<code>i32</code>,\nand attempting to calculate it will cause an overflow. This means\nthat code in debug mode will trigger a panic on this case and\noptimized code will return\n<code>i32::MIN</code>\nwithout a panic.</p>\n<h5 id=\"examples-86\"><a href=\"#examples-86\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.abs(), <span class=\"number\">10</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i32</span>).abs(), <span class=\"number\">10</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.abs(),+10);%0Aassert_eq!((-10i32).abs(),+10);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.abs_diff\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.60.0, const since 1.60.0\">1.60.0 (const: 1.60.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.abs_diff\" class=\"fn\">abs_diff</a>(self, other: Self) -&gt; <a class=\"primitive\" href=\"primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Computes the absolute difference between <code>self</code> and <code>other</code>.</p>\n<p>This function always returns the correct answer without overflow or\npanics by returning an unsigned integer.</p>\n<h5 id=\"examples-87\"><a href=\"#examples-87\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.abs_diff(<span class=\"number\">80</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">100i32</span>.abs_diff(<span class=\"number\">110</span>), <span class=\"number\">10u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).abs_diff(<span class=\"number\">80</span>), <span class=\"number\">180u32</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">100i32</span>).abs_diff(-<span class=\"number\">120</span>), <span class=\"number\">20u32</span>);\n<span class=\"macro\">assert_eq!</span>(i32::MIN.abs_diff(i32::MAX), u32::MAX);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(100i32.abs_diff(80),+20u32);%0Aassert_eq!(100i32.abs_diff(110),+10u32);%0Aassert_eq!((-100i32).abs_diff(80),+180u32);%0Aassert_eq!((-100i32).abs_diff(-120),+20u32);%0Aassert_eq!(i32::MIN.abs_diff(i32::MAX),+u32::MAX);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.signum\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.47.0\">1.0.0 (const: 1.47.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.signum\" class=\"fn\">signum</a>(self) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Returns a number representing sign of <code>self</code>.</p>\n<ul>\n<li><code>0</code> if the number is zero</li>\n<li><code>1</code> if the number is positive</li>\n<li><code>-1</code> if the number is negative</li>\n</ul>\n<h5 id=\"examples-88\"><a href=\"#examples-88\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(<span class=\"number\">10i32</span>.signum(), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">0i32</span>.signum(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>((-<span class=\"number\">10i32</span>).signum(), -<span class=\"number\">1</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(10i32.signum(),+1);%0Aassert_eq!(0i32.signum(),+0);%0Aassert_eq!((-10i32).signum(),+-1);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_positive\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.is_positive\" class=\"fn\">is_positive</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is positive and <code>false</code> if the number is zero or\nnegative.</p>\n<h5 id=\"examples-89\"><a href=\"#examples-89\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>(<span class=\"number\">10i32</span>.is_positive());\n<span class=\"macro\">assert!</span>(!(-<span class=\"number\">10i32</span>).is_positive());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!(10i32.is_positive());%0Aassert!(!(-10i32).is_positive());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_negative\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.is_negative\" class=\"fn\">is_negative</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns <code>true</code> if <code>self</code> is negative and <code>false</code> if the number is zero or\npositive.</p>\n<h5 id=\"examples-90\"><a href=\"#examples-90\">Examples</a></h5>\n<p>Basic usage:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert!</span>((-<span class=\"number\">10i32</span>).is_negative());\n<span class=\"macro\">assert!</span>(!<span class=\"number\">10i32</span>.is_negative());</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert!((-10i32).is_negative());%0Aassert!(!10i32.is_negative());%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.to_be_bytes\" class=\"fn\">to_be_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nbig-endian (network) byte order.</p>\n<h5 id=\"examples-91\"><a href=\"#examples-91\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678i32</span>.to_be_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678i32.to_be_bytes();%0Aassert_eq!(bytes,+%5B0x12,+0x34,+0x56,+0x78%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.to_le_bytes\" class=\"fn\">to_le_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nlittle-endian byte order.</p>\n<h5 id=\"examples-92\"><a href=\"#examples-92\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678i32</span>.to_le_bytes();\n<span class=\"macro\">assert_eq!</span>(bytes, [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678i32.to_le_bytes();%0Aassert_eq!(bytes,+%5B0x78,+0x56,+0x34,+0x12%5D);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.to_ne_bytes\" class=\"fn\">to_ne_bytes</a>(self) -&gt; [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]</h4></section></summary><div class=\"docblock\"><p>Return the memory representation of this integer as a byte array in\nnative byte order.</p>\n<p>As the target platform’s native endianness is used, portable code\nshould use <a href=\"core/primitive.i32.html#method.to_be_bytes\" title=\"method i32::to_be_bytes\"><code>to_be_bytes</code></a> or <a href=\"core/primitive.i32.html#method.to_le_bytes\" title=\"method i32::to_le_bytes\"><code>to_le_bytes</code></a>, as appropriate,\ninstead.</p>\n<h5 id=\"examples-93\"><a href=\"#examples-93\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>bytes = <span class=\"number\">0x12345678i32</span>.to_ne_bytes();\n<span class=\"macro\">assert_eq!</span>(\n    bytes,\n    <span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n        [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n    } <span class=\"kw\">else </span>{\n        [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n    }\n);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+bytes+=+0x12345678i32.to_ne_bytes();%0Aassert_eq!(%0A++++bytes,%0A++++if+cfg!(target_endian+=+%22big%22)+%7B%0A++++++++%5B0x12,+0x34,+0x56,+0x78%5D%0A++++%7D+else+%7B%0A++++++++%5B0x78,+0x56,+0x34,+0x12%5D%0A++++%7D%0A);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_be_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.from_be_bytes\" class=\"fn\">from_be_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nbig endian.</p>\n<h5 id=\"examples-94\"><a href=\"#examples-94\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i32::from_be_bytes([<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i32::from_be_bytes(%5B0x12,+0x34,+0x56,+0x78%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_be_i32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i32::from_be_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_be_i32(input:+%26mut+%26%5Bu8%5D)+-%3E+i32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci32%3E());%0A++++*input+=+rest;%0A++++i32::from_be_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_le_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.from_le_bytes\" class=\"fn\">from_le_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its representation as a byte array in\nlittle endian.</p>\n<h5 id=\"examples-95\"><a href=\"#examples-95\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i32::from_le_bytes([<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]);\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i32::from_le_bytes(%5B0x78,+0x56,+0x34,+0x12%5D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_le_i32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i32::from_le_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_le_i32(input:+%26mut+%26%5Bu8%5D)+-%3E+i32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci32%3E());%0A++++*input+=+rest;%0A++++i32::from_le_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_ne_bytes\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.32.0, const since 1.44.0\">1.32.0 (const: 1.44.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.from_ne_bytes\" class=\"fn\">from_ne_bytes</a>(bytes: [<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>; <a class=\"primitive\" href=\"primitive.array.html\">4</a>]) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create an integer value from its memory representation as a byte\narray in native endianness.</p>\n<p>As the target platform’s native endianness is used, portable code\nlikely wants to use <a href=\"core/primitive.i32.html#method.from_be_bytes\" title=\"associated function i32::from_be_bytes\"><code>from_be_bytes</code></a> or <a href=\"core/primitive.i32.html#method.from_le_bytes\" title=\"associated function i32::from_le_bytes\"><code>from_le_bytes</code></a>, as\nappropriate instead.</p>\n<h5 id=\"examples-96\"><a href=\"#examples-96\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>value = i32::from_ne_bytes(<span class=\"kw\">if </span><span class=\"macro\">cfg!</span>(target_endian = <span class=\"string\">\"big\"</span>) {\n    [<span class=\"number\">0x12</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x78</span>]\n} <span class=\"kw\">else </span>{\n    [<span class=\"number\">0x78</span>, <span class=\"number\">0x56</span>, <span class=\"number\">0x34</span>, <span class=\"number\">0x12</span>]\n});\n<span class=\"macro\">assert_eq!</span>(value, <span class=\"number\">0x12345678</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Alet+value+=+i32::from_ne_bytes(if+cfg!(target_endian+=+%22big%22)+%7B%0A++++%5B0x12,+0x34,+0x56,+0x78%5D%0A%7D+else+%7B%0A++++%5B0x78,+0x56,+0x34,+0x12%5D%0A%7D);%0Aassert_eq!(value,+0x12345678);%0A%7D&amp;edition=2021\">Run</a></div>\n<p>When starting from a slice rather than an array, fallible conversion APIs can be used:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">fn </span>read_ne_i32(input: <span class=\"kw-2\">&amp;mut &amp;</span>[u8]) -&gt; i32 {\n    <span class=\"kw\">let </span>(int_bytes, rest) = input.split_at(std::mem::size_of::&lt;i32&gt;());\n    <span class=\"kw-2\">*</span>input = rest;\n    i32::from_ne_bytes(int_bytes.try_into().unwrap())\n}</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Afn+read_ne_i32(input:+%26mut+%26%5Bu8%5D)+-%3E+i32+%7B%0A++++let+(int_bytes,+rest)+=+input.split_at(std::mem::size_of::%3Ci32%3E());%0A++++*input+=+rest;%0A++++i32::from_ne_bytes(int_bytes.try_into().unwrap())%0A%7D%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.min_value\" class=\"fn\">min_value</a>() -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future version: replaced by the <code>MIN</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"core/primitive.i32.html#associatedconstant.MIN\" title=\"associated constant i32::MIN\"><code>i32::MIN</code></a> instead.</p>\n<p>Returns the smallest value that can be represented by this integer type.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max_value\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const since 1.32.0\">1.0.0 (const: 1.32.0)</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#335-354\">source</a></span><h4 class=\"code-header\">pub const fn <a href=\"core/primitive.i32.html#tymethod.max_value\" class=\"fn\">max_value</a>() -&gt; Self</h4></section><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">👎</span><span>Deprecating in a future version: replaced by the <code>MAX</code> associated constant on this type</span></div></span></summary><div class=\"docblock\"><p>New code should prefer to use\n<a href=\"core/primitive.i32.html#associatedconstant.MAX\" title=\"associated constant i32::MAX\"><code>i32::MAX</code></a> instead.</p>\n<p>Returns the largest value that can be represented by this integer type.</p>\n</div></details></div></details>",0,"core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#310\">source</a></span><a href=\"#impl-TryFrom%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#310\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#110\">source</a></span><a href=\"#impl-Add-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#110\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"core/ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#471-474\">source</a></span><a href=\"#impl-Display-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#471-474\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#766\">source</a></span><a href=\"#impl-AddAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.AddAssign.html\" title=\"trait core::ops::AddAssign\">AddAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#766\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"core/ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#117\">source</a></span><a href=\"#impl-From%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#117\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i16</code> to <code>i32</code> losslessly.</p>\n</div></details></div></details>","From<i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#396\">source</a></span><a href=\"#impl-TryFrom%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#396\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cbool%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.28.0\">1.28.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#93\">source</a></span><a href=\"#impl-From%3Cbool%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.bool.html\">bool</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#93\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.bool.html\">bool</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>bool</code> to a <code>i32</code>. The resulting value is <code>0</code> for <code>false</code> and <code>1</code> for <code>true</code>\nvalues.</p>\n<h5 id=\"examples\"><a href=\"#examples\">Examples</a></h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"macro\">assert_eq!</span>(i32::from(<span class=\"bool-val\">true</span>), <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(i32::from(<span class=\"bool-val\">false</span>), <span class=\"number\">0</span>);</code></pre><a class=\"test-arrow\" target=\"_blank\" href=\"https://play.rust-lang.org/?code=%23!%5Ballow(unused)%5D%0Afn+main()+%7B%0Aassert_eq!(i32::from(true),+1);%0Aassert_eq!(i32::from(false),+0);%0A%7D&amp;edition=2021\">Run</a></div>\n</div></details></div></details>","From<bool>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SimdElement-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/vector.rs.html#927-929\">source</a><a href=\"#impl-SimdElement-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.SimdElement.html\" title=\"trait core::simd::SimdElement\">SimdElement</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Mask\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Mask\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/simd/trait.SimdElement.html#associatedtype.Mask\" class=\"associatedtype\">Mask</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>portable_simd</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/86656\">#86656</a>)</span></div></span><div class='docblock'>The mask element type corresponding to this element type.</div></details></div></details>","SimdElement","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#948\">source</a></span><a href=\"#impl-DivAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.DivAssign.html\" title=\"trait core::ops::DivAssign\">DivAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#948\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"core/ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/trait.Product.html\" title=\"trait core::iter::Product\">Product</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a Self</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product<&'a i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#488-491\">source</a></span><a href=\"#impl-Div-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"docblock\"><p>This operation rounds towards zero, truncating any\nfractional part of the exact result.</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or the division results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#488-491\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"core/ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-Copy-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/marker.rs.html#489-499\">source</a></span><a href=\"#impl-Copy-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","Copy","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"core/ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#126\">source</a></span><a href=\"#impl-From%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#126\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u8</code> to <code>i32</code> losslessly.</p>\n</div></details></div></details>","From<u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Neg-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#699\">source</a></span><a href=\"#impl-Neg-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Neg.html\" title=\"trait core::ops::Neg\">Neg</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Neg.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.neg\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#699\">source</a><a href=\"#method.neg\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Neg.html#tymethod.neg\" class=\"fn\">neg</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the unary <code>-</code> operation. <a href=\"core/ops/trait.Neg.html#tymethod.neg\">Read more</a></div></details></div></details>","Neg","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOrAssign.html\" title=\"trait core::ops::BitOrAssign\">BitOrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#590-593\">source</a></span><a href=\"#impl-Rem-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"docblock\"><p>This operation satisfies <code>n % d == n - (n / d) * d</code>. The\nresult has the same sign as the left operand.</p>\n<h4 id=\"panics\"><a href=\"#panics\">Panics</a></h4>\n<p>This operation will panic if <code>other == 0</code> or if <code>self / other</code> results in overflow.</p>\n</div><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#590-593\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"core/ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerExp-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#475-478\">source</a></span><a href=\"#impl-LowerExp-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.LowerExp.html\" title=\"trait core::fmt::LowerExp\">LowerExp</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#475-478\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.LowerExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerExp","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAnd%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#178\">source</a></span><a href=\"#impl-BitAnd%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&amp;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#178\">source</a><a href=\"#method.bitand\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitAnd.html#tymethod.bitand\" class=\"fn\">bitand</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.BitAnd.html\" title=\"trait core::ops::BitAnd\">BitAnd</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitAnd.html#associatedtype.Output\" title=\"type core::ops::BitAnd::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&amp;</code> operation. <a href=\"core/ops/trait.BitAnd.html#tymethod.bitand\">Read more</a></div></details></div></details>","BitAnd<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitXor.html#associatedtype.Output\" title=\"type core::ops::BitXor::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"core/ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a&gt; <a class=\"trait\" href=\"core/iter/trait.Sum.html\" title=\"trait core::iter::Sum\">Sum</a>&lt;&amp;'a <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = <a class=\"primitive\" href=\"primitive.reference.html\">&amp;'a Self</a>&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum<&'a i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#833\">source</a></span><a href=\"#impl-SubAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.SubAssign.html\" title=\"trait core::ops::SubAssign\">SubAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#833\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"core/ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXor-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#378\">source</a></span><a href=\"#impl-BitXor-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXor.html\" title=\"trait core::ops::BitXor\">BitXor</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitXor.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>^</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#378\">source</a><a href=\"#method.bitxor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitXor.html#tymethod.bitxor\" class=\"fn\">bitxor</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>^</code> operation. <a href=\"core/ops/trait.BitXor.html#tymethod.bitxor\">Read more</a></div></details></div></details>","BitXor","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#1009\">source</a></span><a href=\"#impl-RemAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.RemAssign.html\" title=\"trait core::ops::RemAssign\">RemAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#1009\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"core/ops/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#278\">source</a></span><a href=\"#impl-BitOr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#278\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperHex-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-UpperHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.UpperHex.html\" title=\"trait core::fmt::UpperHex\">UpperHex</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.UpperHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperHex","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-StructuralPartialEq-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#214-226\">source</a><a href=\"#impl-StructuralPartialEq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.StructuralPartialEq.html\" title=\"trait core::marker::StructuralPartialEq\">StructuralPartialEq</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","StructuralPartialEq","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#891\">source</a></span><a href=\"#impl-MulAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.MulAssign.html\" title=\"trait core::ops::MulAssign\">MulAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#891\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"core/ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-DivAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#948\">source</a></span><a href=\"#impl-DivAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.DivAssign.html\" title=\"trait core::ops::DivAssign\">DivAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.div_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#948\">source</a><a href=\"#method.div_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.DivAssign.html#tymethod.div_assign\" class=\"fn\">div_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>/=</code> operation. <a href=\"core/ops/trait.DivAssign.html#tymethod.div_assign\">Read more</a></div></details></div></details>","DivAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/default.rs.html#172\">source</a></span><a href=\"#impl-Default-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/default.rs.html#172\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class=\"docblock\"><p>Returns the default value of <code>0</code></p>\n</div></details></div></details>","Default","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#318\">source</a></span><a href=\"#impl-TryFrom%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#318\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNonZeroI32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.31.0\">1.31.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-From%3CNonZeroI32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"core/num/struct.NonZeroI32.html\" title=\"struct core::num::NonZeroI32\">NonZeroI32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(nonzero: <a class=\"struct\" href=\"core/num/struct.NonZeroI32.html\" title=\"struct core::num::NonZeroI32\">NonZeroI32</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts a <code>NonZeroI32</code> into an <code>i32</code></p>\n</div></details></div></details>","From<NonZeroI32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-TrustedStep-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#19\">source</a><a href=\"#impl-TrustedStep-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.TrustedStep.html\" title=\"trait core::iter::TrustedStep\">TrustedStep</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","TrustedStep","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26isize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26isize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sum-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Sum-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Sum.html\" title=\"trait core::iter::Sum\">Sum</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sum\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.sum\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Sum.html#tymethod.sum\" class=\"fn\">sum</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\n“summing up” the items.</div></details></div></details>","Sum","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#316\">source</a></span><a href=\"#impl-TryFrom%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#316\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Add%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#110\">source</a></span><a href=\"#impl-Add%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Add.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Add.html#associatedtype.Output\" title=\"type core::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>+</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.add\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#110\">source</a><a href=\"#method.add\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Add.html#tymethod.add\" class=\"fn\">add</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Add.html\" title=\"trait core::ops::Add\">Add</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Add.html#associatedtype.Output\" title=\"type core::ops::Add::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>+</code> operation. <a href=\"core/ops/trait.Add.html#tymethod.add\">Read more</a></div></details></div></details>","Add<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#227-232\">source</a></span><a href=\"#impl-Clone-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/clone.rs.html#227-232\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/clone.rs.html#169-171\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#317\">source</a></span><a href=\"#impl-TryFrom%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#317\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#129\">source</a></span><a href=\"#impl-From%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#129\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>u16</code> to <code>i32</code> losslessly.</p>\n</div></details></div></details>","From<u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-StructuralEq-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#283-295\">source</a><a href=\"#impl-StructuralEq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.StructuralEq.html\" title=\"trait core::marker::StructuralEq\">StructuralEq</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","StructuralEq","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#391\">source</a></span><a href=\"#impl-TryFrom%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#391\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.5.0\">1.5.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#113\">source</a></span><a href=\"#impl-From%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#113\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(small: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Converts <code>i8</code> to <code>i32</code> losslessly.</p>\n</div></details></div></details>","From<i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LowerHex-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-LowerHex-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.LowerHex.html\" title=\"trait core::fmt::LowerHex\">LowerHex</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.LowerHex.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","LowerHex","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0, const unstable\">1.0.0 (const: <a href=\"https://github.com/rust-lang/rust/issues/92391\" title=\"Tracking issue for const_cmp\">unstable</a>)</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1452-1454\">source</a></span><a href=\"#impl-PartialEq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/92391\" title=\"Tracking issue for const_cmp\">unstable</a></span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1452-1454\">source</a></span><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"const unstable\">const: <a href=\"https://github.com/rust-lang/rust/issues/92391\" title=\"Tracking issue for const_cmp\">unstable</a></span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1452-1454\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-SimdCast-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/cast.rs.html#24\">source</a><a href=\"#impl-SimdCast-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.SimdCast.html\" title=\"trait core::simd::SimdCast\">SimdCast</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","SimdCast","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AddAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#766\">source</a></span><a href=\"#impl-AddAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.AddAssign.html\" title=\"trait core::ops::AddAssign\">AddAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.add_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#766\">source</a><a href=\"#method.add_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.AddAssign.html#tymethod.add_assign\" class=\"fn\">add_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>+=</code> operation. <a href=\"core/ops/trait.AddAssign.html#tymethod.add_assign\">Read more</a></div></details></div></details>","AddAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-RemAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#1009\">source</a></span><a href=\"#impl-RemAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.RemAssign.html\" title=\"trait core::ops::RemAssign\">RemAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#1009\">source</a><a href=\"#method.rem_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.RemAssign.html#tymethod.rem_assign\" class=\"fn\">rem_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>%=</code> operation. <a href=\"core/ops/trait.RemAssign.html#tymethod.rem_assign\">Read more</a></div></details></div></details>","RemAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#349\">source</a></span><a href=\"#impl-Mul-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#349\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"core/ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Mul%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#349\">source</a></span><a href=\"#impl-Mul%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Mul.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>*</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#349\">source</a><a href=\"#method.mul\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Mul.html#tymethod.mul\" class=\"fn\">mul</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Mul.html\" title=\"trait core::ops::Mul\">Mul</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Mul.html#associatedtype.Output\" title=\"type core::ops::Mul::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>*</code> operation. <a href=\"core/ops/trait.Mul.html#tymethod.mul\">Read more</a></div></details></div></details>","Mul<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#201-204\">source</a></span><a href=\"#impl-Debug-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#201-204\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-ConstParamTy-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/marker.rs.html#1028-1039\">source</a><a href=\"#impl-ConstParamTy-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/marker/trait.ConstParamTy.html\" title=\"trait core::marker::ConstParamTy\">ConstParamTy</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","ConstParamTy","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26u128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26u128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-MaskElement-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/portable-simd/crates/core_simd/src/masks.rs.html#87\">source</a><a href=\"#impl-MaskElement-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/simd/trait.MaskElement.html\" title=\"trait core::simd::MaskElement\">MaskElement</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","MaskElement","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXorAssign.html\" title=\"trait core::ops::BitXorAssign\">BitXorAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"core/ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MulAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#891\">source</a></span><a href=\"#impl-MulAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.MulAssign.html\" title=\"trait core::ops::MulAssign\">MulAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.mul_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#891\">source</a><a href=\"#method.mul_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.MulAssign.html#tymethod.mul_assign\" class=\"fn\">mul_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>*=</code> operation. <a href=\"core/ops/trait.MulAssign.html#tymethod.mul_assign\">Read more</a></div></details></div></details>","MulAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<section id=\"impl-Eq-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1463\">source</a></span><a href=\"#impl-Eq-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section>","Eq","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-TryFrom%3Ci128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.34.0\">1.34.0</span> · <a class=\"src\" href=\"src/core/convert/num.rs.html#311\">source</a></span><a href=\"#impl-TryFrom%3Ci128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"primitive.i128.html\">i128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/convert/num.rs.html#311\">source</a><a href=\"#method.try_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/convert/trait.TryFrom.html#tymethod.try_from\" class=\"fn\">try_from</a>(u: <a class=\"primitive\" href=\"primitive.i128.html\">i128</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, Self::<a class=\"associatedtype\" href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" title=\"type core::convert::TryFrom::Error\">Error</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to create the target number type from a source\nnumber type. This returns an error if the source value\nis outside of the range of the target type.</p>\n</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Error\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Error\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/convert/trait.TryFrom.html#associatedtype.Error\" class=\"associatedtype\">Error</a> = <a class=\"struct\" href=\"core/num/struct.TryFromIntError.html\" title=\"struct core::num::TryFromIntError\">TryFromIntError</a></h4></section></summary><div class='docblock'>The type returned in the event of a conversion error.</div></details></div></details>","TryFrom<i128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1581\">source</a></span><a href=\"#impl-Ord-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1581\">source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#829-834\">source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#849-854\">source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#874-887\">source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a> + <a class=\"trait\" href=\"core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOr%3CNonZeroI32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.45.0\">1.45.0</span> · <a class=\"src\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a></span><a href=\"#impl-BitOr%3CNonZeroI32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOr.html\" title=\"trait core::ops::BitOr\">BitOr</a>&lt;<a class=\"struct\" href=\"core/num/struct.NonZeroI32.html\" title=\"struct core::num::NonZeroI32\">NonZeroI32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.BitOr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"struct\" href=\"core/num/struct.NonZeroI32.html\" title=\"struct core::num::NonZeroI32\">NonZeroI32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>|</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/nonzero.rs.html#179-192\">source</a><a href=\"#method.bitor\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitOr.html#tymethod.bitor\" class=\"fn\">bitor</a>(self, rhs: <a class=\"struct\" href=\"core/num/struct.NonZeroI32.html\" title=\"struct core::num::NonZeroI32\">NonZeroI32</a>) -&gt; Self::<a class=\"associatedtype\" href=\"core/ops/trait.BitOr.html#associatedtype.Output\" title=\"type core::ops::BitOr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>|</code> operation. <a href=\"core/ops/trait.BitOr.html#tymethod.bitor\">Read more</a></div></details></div></details>","BitOr<NonZeroI32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAndAssign.html\" title=\"trait core::ops::BitAndAssign\">BitAndAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"core/ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-UpperExp-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.42.0\">1.42.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#475-478\">source</a></span><a href=\"#impl-UpperExp-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.UpperExp.html\" title=\"trait core::fmt::UpperExp\">UpperExp</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#475-478\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.UpperExp.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","UpperExp","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/hash/mod.rs.html#823-836\">source</a></span><a href=\"#impl-Hash-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#823-836\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/hash/mod.rs.html#823-836\">source</a><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H: <a class=\"trait\" href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(data: &amp;[<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>], state: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/cmp.rs.html#1581\">source</a></span><a href=\"#impl-PartialOrd-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1581\">source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1581\">source</a><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1581\">source</a><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;=</code>\noperator. <a href=\"core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1581\">source</a><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;=</code>\noperator. <a href=\"core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/cmp.rs.html#1581\">source</a><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code> operator. <a href=\"core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details></div></details>","PartialOrd","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Rem%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#590-593\">source</a></span><a href=\"#impl-Rem%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Rem.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>%</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.rem\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#590-593\">source</a><a href=\"#method.rem\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Rem.html#tymethod.rem\" class=\"fn\">rem</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Rem.html\" title=\"trait core::ops::Rem\">Rem</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Rem.html#associatedtype.Output\" title=\"type core::ops::Rem::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>%</code> operation. <a href=\"core/ops/trait.Rem.html#tymethod.rem\">Read more</a></div></details></div></details>","Rem<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#219\">source</a></span><a href=\"#impl-Sub-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#219\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"core/ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3Cisize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3Cisize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;<a class=\"primitive\" href=\"primitive.isize.html\">isize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.isize.html\">isize</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<isize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Sub%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#219\">source</a></span><a href=\"#impl-Sub%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Sub.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>-</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#219\">source</a><a href=\"#method.sub\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Sub.html#tymethod.sub\" class=\"fn\">sub</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Sub.html\" title=\"trait core::ops::Sub\">Sub</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Sub.html#associatedtype.Output\" title=\"type core::ops::Sub::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>-</code> operation. <a href=\"core/ops/trait.Sub.html#tymethod.sub\">Read more</a></div></details></div></details>","Sub<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i16.html\">i16</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26u64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26u64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u64.html\">u64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&u64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitAndAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#726\">source</a></span><a href=\"#impl-BitAndAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitAndAssign.html\" title=\"trait core::ops::BitAndAssign\">BitAndAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitand_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#726\">source</a><a href=\"#method.bitand_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitAndAssign.html#tymethod.bitand_assign\" class=\"fn\">bitand_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&amp;=</code> operation. <a href=\"core/ops/trait.BitAndAssign.html#tymethod.bitand_assign\">Read more</a></div></details></div></details>","BitAndAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<&i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Binary-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Binary-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Binary.html\" title=\"trait core::fmt::Binary\">Binary</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.Binary.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Binary","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-SubAssign%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#833\">source</a></span><a href=\"#impl-SubAssign%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.SubAssign.html\" title=\"trait core::ops::SubAssign\">SubAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.sub_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#833\">source</a><a href=\"#method.sub_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.SubAssign.html#tymethod.sub_assign\" class=\"fn\">sub_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>-=</code> operation. <a href=\"core/ops/trait.SubAssign.html#tymethod.sub_assign\">Read more</a></div></details></div></details>","SubAssign<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Cu32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Cu32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.u32.html\">u32</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Product-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.12.0\">1.12.0</span> · <a class=\"src\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a></span><a href=\"#impl-Product-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Product.html\" title=\"trait core::iter::Product\">Product</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.product\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/traits/accum.rs.html#149\">source</a><a href=\"#method.product\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Product.html#tymethod.product\" class=\"fn\">product</a>&lt;I: <a class=\"trait\" href=\"core/iter/trait.Iterator.html\" title=\"trait core::iter::Iterator\">Iterator</a>&lt;Item = Self&gt;&gt;(iter: I) -&gt; Self</h4></section></summary><div class='docblock'>Method which takes an iterator and generates <code>Self</code> from the elements by\nmultiplying the items.</div></details></div></details>","Product","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromStr-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/num/mod.rs.html#1399\">source</a></span><a href=\"#impl-FromStr-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/str/trait.FromStr.html\" title=\"trait core::str::FromStr\">FromStr</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Err\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Err\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/str/trait.FromStr.html#associatedtype.Err\" class=\"associatedtype\">Err</a> = <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a></h4></section></summary><div class='docblock'>The associated error which can be returned from parsing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_str\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/num/mod.rs.html#1399\">source</a><a href=\"#method.from_str\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/str/trait.FromStr.html#tymethod.from_str\" class=\"fn\">from_str</a>(src: &amp;<a class=\"primitive\" href=\"primitive.str.html\">str</a>) -&gt; <a class=\"enum\" href=\"core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"struct\" href=\"core/num/struct.ParseIntError.html\" title=\"struct core::num::ParseIntError\">ParseIntError</a>&gt;</h4></section></summary><div class='docblock'>Parses a string <code>s</code> to return a value of this type. <a href=\"core/str/trait.FromStr.html#tymethod.from_str\">Read more</a></div></details></div></details>","FromStr","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Octal-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/fmt/num.rs.html#181\">source</a></span><a href=\"#impl-Octal-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/fmt/trait.Octal.html\" title=\"trait core::fmt::Octal\">Octal</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/fmt/num.rs.html#181\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/fmt/trait.Octal.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter.</div></details></div></details>","Octal","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Step-for-i32\" class=\"impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#impl-Step-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/iter/trait.Step.html\" title=\"trait core::iter::Step\">Step</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"core/iter/trait.Step.html#method.forward_unchecked\" class=\"fn\">forward_unchecked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"core/iter/trait.Step.html#method.forward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_unchecked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_unchecked\" class=\"anchor\">§</a><h4 class=\"code-header\">unsafe fn <a href=\"core/iter/trait.Step.html#method.backward_unchecked\" class=\"fn\">backward_unchecked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"core/iter/trait.Step.html#method.backward_unchecked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Step.html#method.forward\" class=\"fn\">forward</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"core/iter/trait.Step.html#method.forward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Step.html#method.backward\" class=\"fn\">backward</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"core/iter/trait.Step.html#method.backward\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.steps_between\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.steps_between\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Step.html#tymethod.steps_between\" class=\"fn\">steps_between</a>(start: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>, end: <a class=\"primitive\" href=\"primitive.reference.html\">&amp;Self</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the number of <em>successor</em> steps required to get from <code>start</code> to <code>end</code>. <a href=\"core/iter/trait.Step.html#tymethod.steps_between\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.forward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.forward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Step.html#tymethod.forward_checked\" class=\"fn\">forward_checked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>successor</em>\nof <code>self</code> <code>count</code> times. <a href=\"core/iter/trait.Step.html#tymethod.forward_checked\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.backward_checked\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/iter/range.rs.html#393-396\">source</a><a href=\"#method.backward_checked\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/iter/trait.Step.html#tymethod.backward_checked\" class=\"fn\">backward_checked</a>(start: Self, n: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;Self&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>step_trait</code>&nbsp;<a href=\"https://github.com/rust-lang/rust/issues/42168\">#42168</a>)</span></div></span><div class='docblock'>Returns the value that would be obtained by taking the <em>predecessor</em>\nof <code>self</code> <code>count</code> times. <a href=\"core/iter/trait.Step.html#tymethod.backward_checked\">Read more</a></div></details></div></details>","Step","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitXorAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#868\">source</a></span><a href=\"#impl-BitXorAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitXorAssign.html\" title=\"trait core::ops::BitXorAssign\">BitXorAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitxor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#868\">source</a><a href=\"#method.bitxor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitXorAssign.html#tymethod.bitxor_assign\" class=\"fn\">bitxor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>^=</code> operation. <a href=\"core/ops/trait.BitXorAssign.html#tymethod.bitxor_assign\">Read more</a></div></details></div></details>","BitXorAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u8.html\">u8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u8.html\">u8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Div%3C%26i32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/arith.rs.html#488-491\">source</a></span><a href=\"#impl-Div%3C%26i32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Div.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Div.html#associatedtype.Output\" title=\"type core::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>/</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.div\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/arith.rs.html#488-491\">source</a><a href=\"#method.div\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Div.html#tymethod.div\" class=\"fn\">div</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Div.html\" title=\"trait core::ops::Div\">Div</a>&lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Div.html#associatedtype.Output\" title=\"type core::ops::Div::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>/</code> operation. <a href=\"core/ops/trait.Div.html#tymethod.div\">Read more</a></div></details></div></details>","Div<&i32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cusize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cusize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Cu128%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Cu128%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.u128.html\">u128</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.u128.html\">u128</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<u128>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShrAssign%3C%26u32%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.22.0\">1.22.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#1032\">source</a></span><a href=\"#impl-ShrAssign%3C%26u32%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShrAssign.html\" title=\"trait core::ops::ShrAssign\">ShrAssign</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#1032\">source</a><a href=\"#method.shr_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\" class=\"fn\">shr_assign</a>(&amp;mut self, other: &amp;<a class=\"primitive\" href=\"primitive.u32.html\">u32</a>)</h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;=</code> operation. <a href=\"core/ops/trait.ShrAssign.html#tymethod.shr_assign\">Read more</a></div></details></div></details>","ShrAssign<&u32>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ShlAssign%3Ci8%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#950\">source</a></span><a href=\"#impl-ShlAssign%3Ci8%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.ShlAssign.html\" title=\"trait core::ops::ShlAssign\">ShlAssign</a>&lt;<a class=\"primitive\" href=\"primitive.i8.html\">i8</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#950\">source</a><a href=\"#method.shl_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\" class=\"fn\">shl_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i8.html\">i8</a>)</h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;=</code> operation. <a href=\"core/ops/trait.ShlAssign.html#tymethod.shl_assign\">Read more</a></div></details></div></details>","ShlAssign<i8>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BitOrAssign-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.8.0\">1.8.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#797\">source</a></span><a href=\"#impl-BitOrAssign-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.BitOrAssign.html\" title=\"trait core::ops::BitOrAssign\">BitOrAssign</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.bitor_assign\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#797\">source</a><a href=\"#method.bitor_assign\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\" class=\"fn\">bitor_assign</a>(&amp;mut self, other: <a class=\"primitive\" href=\"primitive.i32.html\">i32</a>)</h4></section></summary><div class='docblock'>Performs the <code>|=</code> operation. <a href=\"core/ops/trait.BitOrAssign.html#tymethod.bitor_assign\">Read more</a></div></details></div></details>","BitOrAssign","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Not-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#68\">source</a></span><a href=\"#impl-Not-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Not.html\" title=\"trait core::ops::Not\">Not</a> for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Not.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>!</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.not\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#68\">source</a><a href=\"#method.not\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Not.html#tymethod.not\" class=\"fn\">not</a>(self) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the unary <code>!</code> operation. <a href=\"core/ops/trait.Not.html#tymethod.not\">Read more</a></div></details></div></details>","Not","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3Cu16%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3Cu16%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.u16.html\">u16</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: <a class=\"primitive\" href=\"primitive.u16.html\">u16</a>) -&gt; <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<u16>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shl%3C%26i64%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#496\">source</a></span><a href=\"#impl-Shl%3C%26i64%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shl.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&lt;&lt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shl\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#496\">source</a><a href=\"#method.shl\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shl.html#tymethod.shl\" class=\"fn\">shl</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shl.html\" title=\"trait core::ops::Shl\">Shl</a>&lt;<a class=\"primitive\" href=\"primitive.i64.html\">i64</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shl.html#associatedtype.Output\" title=\"type core::ops::Shl::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&lt;&lt;</code> operation. <a href=\"core/ops/trait.Shl.html#tymethod.shl\">Read more</a></div></details></div></details>","Shl<&i64>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Shr%3C%26usize%3E-for-i32\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"src/core/ops/bit.rs.html#614\">source</a></span><a href=\"#impl-Shr%3C%26usize%3E-for-i32\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;&amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt; for <a class=\"primitive\" href=\"primitive.i32.html\">i32</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"core/ops/trait.Shr.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>The resulting type after applying the <code>&gt;&gt;</code> operator.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.shr\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/core/ops/bit.rs.html#614\">source</a><a href=\"#method.shr\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"core/ops/trait.Shr.html#tymethod.shr\" class=\"fn\">shr</a>(self, other: &amp;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>) -&gt; &lt;<a class=\"primitive\" href=\"primitive.i32.html\">i32</a> as <a class=\"trait\" href=\"core/ops/trait.Shr.html\" title=\"trait core::ops::Shr\">Shr</a>&lt;<a class=\"primitive\" href=\"primitive.usize.html\">usize</a>&gt;&gt;::<a class=\"associatedtype\" href=\"core/ops/trait.Shr.html#associatedtype.Output\" title=\"type core::ops::Shr::Output\">Output</a></h4></section></summary><div class='docblock'>Performs the <code>&gt;&gt;</code> operation. <a href=\"core/ops/trait.Shr.html#tymethod.shr\">Read more</a></div></details></div></details>","Shr<&usize>","core::ffi::c_int","core::core_arch::x86::_MM_CMPINT_ENUM","core::core_arch::x86::_MM_MANTISSA_NORM_ENUM","core::core_arch::x86::_MM_MANTISSA_SIGN_ENUM","core::core_arch::x86::_MM_PERM_ENUM"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()