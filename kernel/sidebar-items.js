initSidebarItems({"macro":[["b_str","Creates a new [`BStr`] from a string literal."],["build_assert","Asserts that a boolean expression is `true` at compile time."],["build_error","Fails the build if the code path calling `build_error!` can possibly be executed."],["c_str","Creates a new [`CStr`] from a string literal."],["dbg","`std::dbg`, but using [`pr_info`] instead of `eprintln`."],["fmt","A convenience alias for [`core::format_args`]."],["pr_alert","Prints an alert-level message (level 1)."],["pr_cont","Continues a previous log message in the same line."],["pr_crit","Prints a critical-level message (level 2)."],["pr_debug","Prints a debug-level message (level 7)."],["pr_emerg","Prints an emergency-level message (level 0)."],["pr_err","Prints an error-level message (level 3)."],["pr_info","Prints an info-level message (level 6)."],["pr_notice","Prints a notice-level message (level 5)."],["pr_warn","Prints a warning-level message (level 4)."],["static_assert","Static assert (i.e. compile-time assert)."]],"mod":[["error","Kernel errors."],["prelude","The `kernel` prelude."],["print","Printing facilities."],["str","String representations."],["sync","Synchronisation primitives."],["types","Kernel types."]],"struct":[["ThisModule","Equivalent to `THIS_MODULE` in the C API."]],"trait":[["Module","The top level entrypoint to implementing a kernel module."]]});